{{ 'collection.css' | asset_url | stylesheet_tag }}
{% style %}
    .collection_section {
    	position: relative;
    }
	.sorting {
		position: absolute;
        top: 23%;
        right: 0;
	}
    .facet-filters__field {
        display: flex;
		position: relative;
    }
	.facet-filters__sort {
		width: 135px;
        border: none;
        font-size: 12px;
        font-weight: 500;
        color: #979797;
        appearance: button;
        cursor: pointer;
	}
    .facet-filters__label {
        font-size: 12px;
        font-weight: 500;
        padding: 3px 18px;
        color: #979797;
    }
{% endstyle %}
<div id="wrapper" class="collection">
        <div class="inner">
            <div class="txt_desp">
                <h3>{{- collection.title | escape -}}</h3>
            </div>
            <div class="collection_section">
                 {% render 'facets', results: collection, enable_filtering: section.settings.enable_filtering, enable_sorting: section.settings.enable_sorting %}
                <div class="collection_product_grid">
                    <div class="collection util_pc">
                        <div class="collection_banner">
                            <img src="{{section.settings.image_banner | img_url: 'master' }}" alt="">
                        </div>
                    </div>
                    <div class="collection_product">
                        <div class="wrapper  util_pc">
                            <div class="collection_product_wrap">
                                <div class="collection_product_count">
                                    <p>There are <span>{{ collection.products_count }} products</span></p>
                                </div>
                            </div>
                        </div>
                        <div id="ProductGridContainer" class="collection_product_list">
                          {%- paginate collection.products by section.settings.products_per_page -%}
                            <div class="inner">
                                <div class="loading_overlay gradient"></div>
                                <div class="list_item" >
                                    <ul id="list_collection" class="items" data-id="{{ section.id }}" >
                                      {%- for product in collection.products -%}
                                      		<li	>
                                              {% render 'product-card',
                                               product_card_product: product
                                              %}
                                            </li>
                                      {%- endfor -%}
                                    </ul>
                                  {%- if paginate.pages > 1 -%}
                                    {% render 'pagination', paginate: paginate, anchor: '' %}
                                  {%- endif -%}
                                </div>
                            </div>
                          {%- endpaginate -%}
                        </div>
                    </div>
                </div>
            </div>
        </div>
</div>
<script>

function debounce(fn, wait) {
  let t;
  return (...args) => {
    clearTimeout(t);
    t = setTimeout(() => fn.apply(this, args), wait);
  };
}

class MenuDrawer extends HTMLElement {
  constructor() {
    super();

    this.mainDetailsToggle = this.querySelector('details');

    if (navigator.platform === 'iPhone') document.documentElement.style.setProperty('--viewport-height', `${window.innerHeight}px`);

    this.bindEvents();
  }

  bindEvents() {
    this.querySelectorAll('summary').forEach(summary => summary.addEventListener('click', this.onSummaryClick.bind(this)));
    this.querySelectorAll('button').forEach(button => button.addEventListener('click', this.onCloseButtonClick.bind(this)));
  }

  

  onSummaryClick(event) {
    const summaryElement = event.currentTarget;
    const detailsElement = summaryElement.parentNode;
    const isOpen = detailsElement.hasAttribute('open');
    const reducedMotion = window.matchMedia("(prefers-reduced-motion: reduce)");

    function addTrapFocus() {
      trapFocus(summaryElement.nextElementSibling, detailsElement.querySelector('button'));
      summaryElement.nextElementSibling.removeEventListener('transitionend', addTrapFocus);
    }

    if (detailsElement === this.mainDetailsToggle) {
      if(isOpen) event.preventDefault();
      isOpen ? this.closeMenuDrawer(event, summaryElement) : this.openMenuDrawer(summaryElement);
    } else {
      setTimeout(() => {
        detailsElement.classList.add('menu-opening');
        summaryElement.setAttribute('aria-expanded', true);
        !reducedMotion || reducedMotion.matches ? addTrapFocus() : summaryElement.nextElementSibling.addEventListener('transitionend', addTrapFocus);
      }, 100);
    }
  }

  
  onFocusOut(event) {
    setTimeout(() => {
      if (this.mainDetailsToggle.hasAttribute('open') && !this.mainDetailsToggle.contains(document.activeElement)) this.closeMenuDrawer();
    });
  }

  onCloseButtonClick(event) {
    const detailsElement = event.currentTarget.closest('details');
    this.closeSubmenu(detailsElement);
  }

  closeSubmenu(detailsElement) {
    detailsElement.classList.remove('menu-opening');
    detailsElement.querySelector('summary').setAttribute('aria-expanded', false);
    removeTrapFocus();
    this.closeAnimation(detailsElement);
  }

  
}

customElements.define('menu-drawer', MenuDrawer);

</script>
<script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>

{% schema %}
{
  "name": "main-collection-product",
  "class": "section",
  "settings": [
	{
		"type": "image_picker",
		"id": "image_banner",
		"label": "Banner image"
	},
    {
      "type": "range",
      "id": "products_per_page",
      "min": 6,
      "max": 24,
      "step": 2,
      "default": 16,
      "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
    },
	{
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    }
 
  ]
}
{% endschema %}
