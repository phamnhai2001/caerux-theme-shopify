<div id="wrapper_product">
  <div class="inner">
	<section class="section" id="recommended">
                <div class="inner">
                <product-recommendations class="product-recommendations page-width" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4">
                   {% if recommendations.performed and recommendations.products_count > 0 %}
                  	<div class="ttl_product">
                        <h3>{{section.settings.heading | escape }}</h3>
                    </div>
                    <div class="list_item">
                        <ul id="list_recommend">
                                {% for recommendation in recommendations.products %}
                          		<li class="slide">
                                    {% render 'product-card',
            							product_card_product: recommendation
                                  %}
                                 </li>
                          {% endfor %}
						</ul>                       
                    </div>
                   {% endif %}
                 </product-recommendations>
                </div>
	</section>
  </div>
</div>
{% javascript %}
  class ProductRecommendations extends HTMLElement {
    constructor() {
      super();

      const handleIntersection = (entries, observer) => {
        if (!entries[0].isIntersecting) return;
        observer.unobserve(this);

        fetch(this.dataset.url)
          .then(response => response.text())
          .then(text => {
            const html = document.createElement('div');
            html.innerHTML = text;
            const recommendations = html.querySelector('product-recommendations');
            if (recommendations && recommendations.innerHTML.trim().length) {
              this.innerHTML = recommendations.innerHTML;
            }
          })
          .catch(e => {
            console.error(e);
          });
      }

      new IntersectionObserver(handleIntersection.bind(this), {rootMargin: '0px 0px 200px 0px'}).observe(this);
    }
  }

  customElements.define('product-recommendations', ProductRecommendations);
{% endjavascript %}
{% schema %}
{
  "name": "t:sections.product-recommendations.name",
  "tag": "section",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "default": "Featured product",
      "label": "t:sections.product-recommendations.settings.heading.label"
    }
  ]
}
{% endschema %}
